/*
 * Copyright 2017 - 2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.gradle.java.extension


import org.gradle.api.reflect.TypeOf.typeOf
import org.gradle.api.tasks.JavaExec
import org.gradle.java.JigsawPlugin


interface JavaExecOptions: RuntimeJavaOptions, AutoGenerateSettableCascading {

    override val module:      AutoGeneratableSeparableValueScalarOption<String?>
    override val modulePath:  AutoGeneratableSeparableValueVarargOption<String>
    override val patchModule: AutoGeneratableSeparableValueKeyedVarargOption<String, String>
}


open class JavaExecOptionsInternal(
                 autoGenerateParent:  AutoGenerateGettable,
                separateValueParent: SeparateValueGettable,
    private val            javaExec: JavaExec
):
JavaExecOptions,
AutoGeneratableCascading by DefaultAutoGeneratableCascading( autoGenerateParent),
 SeparableValueCascading by  DefaultSeparableValueCascading(separateValueParent),
RuntimeJavaOptionsInternal() {

    override fun getPublicType() =
        PUBLIC_TYPE


    override val args = JavaForkOptionsArgAppendable(javaExec)


    override val module: AutoGeneratableSeparableValueScalarOptionInternal<String?> by lazy {
        object:
        AutoGeneratableSeparableValueScalarOptionInternal<String?>,
        Module(),
        AutoGeneratableCascading by DefaultAutoGeneratableCascading(this) {
            override var value: String?
            get() {
                if (autoGenerate.isEnabled) {
                    val main = javaExec.main

                    configureMlist += {javaExec.main = ""}
                        resetMlist += {javaExec.main = main}

                    if (super.value == null) {
                        return main
                    }
                }

                return super.value
            }
            set(module) {
                super.value = module
            }
        }
    }

    override val modulePath: AutoGeneratableSeparableValueSetOptionInternal<String> by lazy {
        object:
        AutoGeneratableSeparableValueSetOptionInternal<String>,
        ModulePath(),
        AutoGeneratableCascading by DefaultAutoGeneratableCascading(this) {
            override val value: Set<String>
            get() =
                super.value.appendAutoGeneratedIterator(autoGenerate.isEnabled) {
                    val classpath = javaExec.classpath

                    autoGenerateModulePath(classpath, {javaExec.classpath = javaExec.project.files()}, {javaExec.classpath = classpath})
                }
        }
    }

    override val patchModule: AutoGeneratableSeparableValueLinkedHashMultimapOptionInternal<String, String> by lazy {
        object:
        AutoGeneratableSeparableValueLinkedHashMultimapOptionInternal<String, String>,
        PatchModule(),
        AutoGeneratableCascading by DefaultAutoGeneratableCascading(this) {
            override val value: Map<String, Set<String>>
            get() {
                val moduleName by lazy {javaExec.project.plugins.getPlugin(JigsawPlugin::class.java).getModuleName(javaExec.main)}

                return valueMutable.appendAutoGeneratedMapFromPair(autoGenerate.isEnabled && moduleName != null) {
                    autoGeneratePatchModule(moduleName!!, javaExec.classpath)
                }
            }
        }
    }


    companion object {
        private val PUBLIC_TYPE = typeOf(JavaExecOptions::class.java)
    }
}
