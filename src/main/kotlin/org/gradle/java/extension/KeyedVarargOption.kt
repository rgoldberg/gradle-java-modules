/*
 * Copyright 2017 - 2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.gradle.java.extension


interface KeyedVarargOption<K, V>: Option {

    operator fun invoke(key: K, vararg values: V) =
        invoke(key, values.asIterable())
    operator fun invoke(key: K, valueIterable: Iterable<V>)
    operator fun invoke(vararg pairs: Pair<K, Iterable<V>>) {
        for ((key, valueIterable) in pairs) {
            invoke(key, valueIterable)
        }
    }
}

interface KeyedVarargOptionInternal<K, V, C: Collection<V>>:
KeyedVarargOption<K, V>,
ValueOptionInternal<Map<K, C>, Map.Entry<K, C>> {

    val keyValueSeparator: String
    val valueDelimiter:    String
}

// M must be a subtype of C
interface AbstractKeyedVarargOptionInternal<K, V, C: Collection<V>, M: MutableCollection<V>>: KeyedVarargOptionInternal<K, V, C> {

    override val valueIterable: Iterable<Map.Entry<K, C>>
    get() = value.entries

    override fun valueString(i: Map.Entry<K, C>) =
        i.value.asSequence()
        .map(Any?::toString)
        .joinToString(valueDelimiter, i.key.toString() + keyValueSeparator, "")
        .ifEmpty {null}

    val valueMutable: MutableMap<K, M>

    override operator fun invoke(key: K, valueIterable: Iterable<V>) {
        valueMutable.computeIfAbsent(key) {createCollection()} += valueIterable
    }

    fun createCollection(): M

    fun <I: Iterator<V>> Map<K, C>.appendAutoGeneratedMapFromPair(
        shouldAutoGenerate: Boolean,
        autoGenerate:       () -> Pair<K, I>?
    ):
    Map<K, C> {
        if (shouldAutoGenerate) {
            autoGenerate().let {
                if (it != null && it.second.hasNext()) {
                    val merged = toMutableMap()

                    @Suppress("UNCHECKED_CAST")
                    (merged.computeIfAbsent(it.first) {createCollection() as C} as M) += Iterable(it.second::iterator)

                    return merged
                }
            }
        }

        return this
    }

    fun <I: Iterable<V>> Map<K, C>.appendAutoGeneratedMapFromPairIterator(
        shouldAutoGenerate: Boolean,
        autoGenerate:       () -> Iterator<Pair<K, I>>
    ):
    Map<K, C> {
        if (shouldAutoGenerate) {
            autoGenerate().let {
                if (it.hasNext()) {
                    val merged = toMutableMap()

                    for ((key, valueIter) in it) {
                        @Suppress("UNCHECKED_CAST")
                        (merged.computeIfAbsent(key) {createCollection() as C} as M) += valueIter
                    }

                    return merged
                }
            }
        }

        return this
    }
}

interface LinkedHashMultimapOptionInternal<K, V>: KeyedVarargOptionInternal<K, V, Set<V>>

open class DefaultLinkedHashMultimapOptionInternal<K, V>(
    override val flag:               String,
    override val keyValueSeparator:  String,
    override val valueDelimiter:     String
):
LinkedHashMultimapOptionInternal<K, V>,
AbstractKeyedVarargOptionInternal<K, V, Set<V>, MutableSet<V>> {

    override val value: Map<K, Set<V>>
    get() = valueMutable

    override val valueMutable = mutableMapOf<K, MutableSet<V>>()

    override fun createCollection() =
        mutableSetOf<V>()
}
