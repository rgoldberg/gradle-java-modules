/*
 * Copyright 2017 - 2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.gradle.java.extension


import java.util.stream.Collectors.joining
import kotlinx.collections.immutable.ImmutableSet
import kotlinx.collections.immutable.persistentSetOf


interface VarargOption<T>: Option {

    operator fun invoke(vararg values: T)
}

interface VarargOptionInternal<T>: VarargOption<T>, ValueOptionInternal<Collection<T>, Collection<T>> {

    val delimiter: String
}

interface AbstractVarargOptionInternal<T>: VarargOptionInternal<T> {

    override val valueIterable: ImmutableSet<Collection<T>>
    get() = persistentSetOf(value)

    override fun valueString(i: Collection<T>) =
        i.stream().map {it.toString()}.collect(joining(delimiter)).ifEmpty {null}

    val valueMutable: MutableCollection<T>

    override operator fun invoke(vararg values: T) {
        valueMutable += values
    }
}


interface SetOptionInternal<T>: VarargOptionInternal<T> {

    override val value: Set<T>
}

interface AbstractSetOptionInternal<T>: SetOptionInternal<T>, AbstractVarargOptionInternal<T> {

    override val valueMutable: MutableSet<T>
}

open class DefaultSetOptionInternal<T>(
    override val flag:      String,
    override val delimiter: String
):
AbstractSetOptionInternal<T> {

    override val value: Set<T>
    get() = valueMutable

    override val valueMutable = mutableSetOf<T>()
}


fun <V> Set<V>.appendAutoGeneratedCollection(shouldAutoGenerate: Boolean, autoGenerate: () -> Collection<V>): Set<V> {
    if (shouldAutoGenerate) {
        autoGenerate().let {
            if (it.isNotEmpty()) {
                return this + it
            }
        }
    }

    return this
}

fun <V> Set<V>.appendAutoGeneratedIterator(shouldAutoGenerate: Boolean, autoGenerate: () -> Iterator<V>): Set<V> {
    if (shouldAutoGenerate) {
        autoGenerate().let {
            if (it.hasNext()) {
                return this + Iterable {it}
            }
        }
    }

    return this
}

fun <V> Set<V>.appendAutoGeneratedElement(shouldAutoGenerate: Boolean, autoGenerate: () -> V?): Set<V> {
    if (shouldAutoGenerate) {
        autoGenerate()?.let {
            return this + it
        }
    }

    return this
}
