/*
 * Copyright 2017 - 2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.gradle.java.extension


import java.io.File.pathSeparator
import kotlinx.collections.immutable.persistentSetOf
import org.gradle.api.reflect.TypeOf.typeOf
import org.gradle.api.tasks.testing.Test
import org.gradle.java.JigsawPlugin
import org.gradle.java.testing.isTestInput
import org.gradle.java.testing.moduleNameIset
import org.gradle.java.util.getCompileSourceSetName
import org.gradle.java.util.sourceSets
import org.gradle.kotlin.dsl.withConvention
import org.gradle.kotlin.tool.KOTLINC
import org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile


interface KotlinCompileOptions: Options, AutoGenerateSettableCascading {

    val addModules: AutoGeneratableVarargOption<String>
    val modulePath: AutoGeneratableVarargOption<String>

    // modulePath targets
    val ALL_MODULE_PATH: String
}


open class KotlinCompileOptionsInternal(
                autoGenerateParent: AutoGenerateGettable,
    private val      kotlinCompile: KotlinCompile
):
KotlinCompileOptions,
ModulePathOptionsInternal(),
AutoGeneratableCascading by DefaultAutoGeneratableCascading(autoGenerateParent) {

    //TODO?
    // -Xfriend-paths=<path>
    // -Xsingle-module
    // -Xallow-kotlin-package

    override fun getPublicType() =
        PUBLIC_TYPE


    override val args = {
        val kotlinJvmOptions = kotlinCompile.kotlinOptions

        val argMlist = kotlinJvmOptions.freeCompilerArgs.toMutableList()

        kotlinJvmOptions.freeCompilerArgs = argMlist

        ListArgAppendable(argMlist)
    }()

    override fun config() {
        args
        .appendJoined(addModules)
        .appendJoined(modulePath)
    }


    override val addModules: AutoGeneratableVarargOptionInternal<String> by lazy {
        object:
        AutoGeneratableVarargOptionInternal<String>,
        DefaultSetOptionInternal<String>(KOTLINC.OPTION_ADD_MODULES, ","),
        AutoGeneratableCascading by DefaultAutoGeneratableCascading(this) {
            override val value: Set<String>
            get() =
                super.value.appendAutoGeneratedIterator(autoGenerate.isEnabled && kotlinCompile.isTestInput) {
                    //TODO: ensure works
                    //TODO: only use Test for kotlinCompile instead of all Tests
                    kotlinCompile.project.tasks.withType(Test::class.java).stream()
                    .flatMap {it.moduleNameIset.stream()}
                    .iterator()
                }
        }
    }

    override val modulePath: AutoGeneratableVarargOptionInternal<String> by lazy {
        object:
        AutoGeneratableVarargOptionInternal<String>,
        DefaultSetOptionInternal<String>(KOTLINC.OPTION_MODULE_PATH, pathSeparator),
        AutoGeneratableCascading by DefaultAutoGeneratableCascading(this) {
            override val value: Set<String>
            get() =
                super.value.appendAutoGeneratedIterator(autoGenerate.isEnabled) {
                    //TODO: ensure works
                    val sourceSetName = kotlinCompile.getCompileSourceSetName(TARGET)

                    val project = kotlinCompile.project

                    when {
                        project.plugins.getPlugin(JigsawPlugin::class.java).getModuleNameIbyModuleInfoJavaPath(sourceSetName).isNotEmpty() -> {
                            // source set contains at least one module-info.java
                            //TODO: FILTER BASED ON PRESENCE OF MODULE
                            kotlinCompile.autoGenerateModulePath(kotlinCompile.classpath)
                        }
                        kotlinCompile.isTestInput -> {
                            // when source set doesn't contain any module-info.java, only enable modules if compiling a test source set
                            kotlinCompile.autoGenerateModulePath(
                                kotlinCompile.classpath
                                + project.sourceSets.getByName(sourceSetName).withConvention(KotlinSourceSet::class) {kotlin}.sourceDirectories
                            )
                        }
                        else -> {
                            persistentSetOf<String>().iterator()
                        }
                    }
                }
        }
    }


    // modulePath targets
    override val ALL_MODULE_PATH = KOTLINC.ALL_MODULE_PATH


    companion object {
        private val PUBLIC_TYPE = typeOf(KotlinCompileOptions::class.java)

        private const val TARGET = "Kotlin"
    }
}
